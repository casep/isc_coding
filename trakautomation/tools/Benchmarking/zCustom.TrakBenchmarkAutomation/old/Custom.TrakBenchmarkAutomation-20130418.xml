<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Custom.TrakBenchmarkAutomation">
<Description>
Benchmarking Automation : Glen Pitt-Pladdy 20130416
Read tests based on ZPERFTOOLS by Mark Bolinsky 2009-02-02
Write tests call GMASH</Description>
<Super>%RegisteredObject</Super>
<TimeCreated>62928,42546.378419</TimeCreated>

<Method name="RANREADMenu">
<Description>
/////////////////////////////////////////////////////////////////////////
RANREAD Equivalent
/////////////////////////////////////////////////////////////////////////</Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	set Value=""
	set Flag=8+8192+512
	while Value=""
	{
 		set Status=##class(SYS.Database).GetDirectory("Database directory?",.Value,.Obj,,,,Flag)
 		if (+Status=0)||(Status=2)||(Value="") quit	// TODO
 		set directory=Value
 		if Obj.Mounted=0 write !!,"Database is not mounted, please re-enter",! set Value=""
	}
 	set jobcnt="",cnt=""
 	write !!,"How many processes to start? " read jobcnt
 	if +jobcnt=0 quit
 	write !!,"How long to run Test [default 20 sec]? " read testtime
 	if +testtime=0 s testtime=20
 	write !!,"How long to spin-up before Test [default 10 sec]? " read spinuptime
 	if +spinuptime=0 set spinuptime=10
 	do ..RANREADLaunch(directory,jobcnt,spinuptime,testtime)
]]></Implementation>
</Method>

<Method name="RANREADLaunch">
<ClassMethod>1</ClassMethod>
<FormalSpec>Directory:%String,jobcnt:%Integer,SpinUpTime:%Integer=10,TestTime:%Integer=20,cnt:%Integer=1000000</FormalSpec>
<Implementation><![CDATA[
	// query and find the stats
	set rs=##class(%ResultSet).%New("SYS.Database:Detail")
	if rs.Execute("*",Directory)=0
	{
		write "FATAL - failed to find database info for """_Database_"""",!
		quit 0
	}
	do rs.Next()
	set blocksize = rs.GetData(6)	// BlockSize
	set status = rs.GetData(5)	// Status
	set size = rs.GetData(4)	// Size
	set maxblock=(size*1024*1024)/blocksize
 	if maxblock=0 set maxblock=1
	
	set db="^^"_Directory
	set batch=$I(^%ZPERFTOOLS("RANREAD","BATCH"))
	write !!,"Starting "_jobcnt_" jobs in the background.",!
	write "Set global node ^%ZPERFTOOLS(""RANREAD"")=0 to abort.",!
	set ^%ZPERFTOOLS("RANREAD")=3	// starting value
 	write "* Launching processes",!
	for i=1:1:jobcnt job ..RANREADLoop(maxblock,db,cnt,i,batch)
 	// we have now spun up all the processes - run
	write "* Starting spin-up ("_SpinUpTime_" seconds )",!
 	hang SpinUpTime
 	set start = $ZTIMESTAMP
 	set ^%ZPERFTOOLS("RANREAD")=2	// run test
	write "* Starting test ("_TestTime_" seconds )",!
 	hang TestTime
 	set end = $ZTIMESTAMP
 	set ^%ZPERFTOOLS("RANREAD")=1	// finish test
 	write "* Spinning down",!
 	for i=1:1:10
 	{
	 	hang 1
	 	quit:$DATA(^%ZPERFTOOLS("RANREAD","TESTRUNNING",batch))=0
 	}
 	set ^%ZPERFTOOLS("RANREAD")=0	// end spindown
	write "* Complete test",!
 	// wait for all all processes to clear and verify
 	hang 1
	write "* Calculting results",!
 	if $DATA(^%ZPERFTOOLS("RANREAD","RUNNING",batch))
 	{
	 	write "ERROR - not all processes finished after "_i_" seconds waiting. See ^%ZPERFTOOLS(""RANREAD"",""RUNNING"","_batch_")",!
	 	quit
 	}
 	// work out overall stats
 	set AvgResponse = 0
 	set MaxResponse = 0
 	set MinResponse = -1
 	set AvgIOPS = 0
 	set MaxIOPS = 0
 	set MinIOPS = -1
 	set TotalIOPS = 0
 	for i=1:1:jobcnt
 	{
	 	set Response = ^%ZPERFTOOLS("RANREAD","BATCH",batch,i,"Elapsed") / ^%ZPERFTOOLS("RANREAD","BATCH",batch,i,"Iterations")
	 	if MaxResponse<Response set MaxResponse = Response
	 	if (MinResponse>Response)||(MinResponse<0) set MinResponse = Response
	 	set AvgResponse=AvgResponse+Response
	 	set IOPS = ^%ZPERFTOOLS("RANREAD","BATCH",batch,i,"Iterations") / ^%ZPERFTOOLS("RANREAD","BATCH",batch,i,"Elapsed")
	 	if MaxIOPS<IOPS set MaxIOPS = IOPS
	 	if (MinIOPS>IOPS)||(MinIOPS<0) set MinIOPS = IOPS
	 	set AvgIOPS = AvgIOPS+IOPS
	 	set TotalIOPS = TotalIOPS+IOPS
	}
	set AvgResponse = AvgResponse / jobcnt
	set AvgIOPS = AvgIOPS / jobcnt
	// set all the results
	set ^%ZPERFTOOLS("RANREAD","BATCH",batch,"Start") = start
	set ^%ZPERFTOOLS("RANREAD","BATCH",batch,"End") = end
	set ^%ZPERFTOOLS("RANREAD","BATCH",batch,"AvgResponse") = AvgResponse
	set ^%ZPERFTOOLS("RANREAD","BATCH",batch,"MaxResponse") = MaxResponse
	set ^%ZPERFTOOLS("RANREAD","BATCH",batch,"MinResponse") = MinResponse
	set ^%ZPERFTOOLS("RANREAD","BATCH",batch,"AvgIOPS") = AvgIOPS
	set ^%ZPERFTOOLS("RANREAD","BATCH",batch,"MaxIOPS") = MaxIOPS
	set ^%ZPERFTOOLS("RANREAD","BATCH",batch,"MinIOPS") = MinIOPS
	set ^%ZPERFTOOLS("RANREAD","BATCH",batch,"TotalIOPS") = TotalIOPS
	set ^%ZPERFTOOLS("RANREAD","BATCH",batch,"Processes") = jobcnt
	set ^%ZPERFTOOLS("RANREAD","BATCH",batch,"SpinUpTime") = SpinUpTime
	set ^%ZPERFTOOLS("RANREAD","BATCH",batch,"TestTime") = TestTime
	set ^%ZPERFTOOLS("RANREAD","BATCH",batch,"Itterations") = cnt
	set ^%ZPERFTOOLS("RANREAD","BATCH",batch,"Database") = db
]]></Implementation>
</Method>

<Method name="RANREADLoop">
<Description>
LOOP^Perftools.RANREAD equivalent
Start with ^%ZPERFTOOLS("RANDREAD") = 2
	* spins generating IO (gets things into a sustained state)
Flip to ^%ZPERFTOOLS("RANDREAD") = 1
		* runs test
Finish with ^%ZPERFTOOLS("RANDREAD") = 0
		* stops test, writes results</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>max:%Integer,db:%String,cnt:%Integer,job:%Integer,batch:%Integer</FormalSpec>
<Implementation><![CDATA[
	set ^%ZPERFTOOLS("RANREAD","RUNNING",batch,job) = $J	// mark this job as running
	set ^%ZPERFTOOLS("RANREAD","TESTRUNNING",batch,job) = $J
 	set $ZTRAP="ErrorTrap"
 	// get set - spin waiting to go (starting value = 3)... gets into sustained state
 	for z=1:1:cnt
 	{
	 		 	open 63:db
	 		 	view $RANDOM(max)+1		// 1-based access, $RANDOM returns values up to max-1
	 		 	close 63
	 		 	quit:^%ZPERFTOOLS("RANREAD")<=2
	}
 	// go - run the test (starting value = 2)
 	set start=$ztimestamp
	for z=1:1:cnt
	{
		open 63:db
		view $RANDOM(max)+1		// 1-based access, $RANDOM returns values up to max-1
		close 63
		quit:^%ZPERFTOOLS("RANREAD")<=1
	}
	set end=$ztimestamp
	set itterations=z
	// finish (starting value = 1)
	kill ^%ZPERFTOOLS("RANREAD","TESTRUNNING",batch,job)
	if z = cnt
	{
		kill ^%ZPERFTOOLS("RANREAD","RUNNING",batch,job)
		set ^%ZPERFTOOLS("RANREAD","BATCH",batch,job,"Iterations")=z	// useful to know if it's stopped early
		quit
	}
	// spin down - keep system loaded until all processes have completed
	for z=1:1:cnt
	{
		open 63:db
		view $RANDOM(max)+1		// 1-based access, $RANDOM returns values up to max-1
		close 63
		quit:^%ZPERFTOOLS("RANREAD")<=0
	}
	// TODO should we put a trailing bit to ensure all processes end under load TODO
	set elapsed=$PIECE(end,",",2)-$PIECE(start,",",2)
	set ^%ZPERFTOOLS("RANREAD","BATCH",batch,job,"Start")=start
	set ^%ZPERFTOOLS("RANREAD","BATCH",batch,job,"End")=end
	set ^%ZPERFTOOLS("RANREAD","BATCH",batch,job,"Elapsed")=elapsed
	set ^%ZPERFTOOLS("RANREAD","BATCH",batch,job,"Iterations")=itterations	// useful to know if it's stopped early
	// mark this job as completed (kill the node)
	kill ^%ZPERFTOOLS("RANREAD","RUNNING",batch,job)
	quit
	// error trapping workaround
ErrorTrap
	set $ZTRAP = ""
	do ^%ETN
]]></Implementation>
</Method>

<Method name="AutoReadBenchmark">
<Description>
/////////////////////////////////////////////////////////////////////////
Main automated RANREAD Benchmarking
/////////////////////////////////////////////////////////////////////////
TargetResponse in seconds (keep everything SI Units)</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>TargetResponse:%Float=0.01,Database:%String="ZREADTEST",SpinUpTime:%Integer=60,TestTime:%Integer=900,MaxJobs:%Integer=64</FormalSpec>
<Implementation><![CDATA[
	set Processes = 1
	// need directory path
	if ##class(Config.Databases).Get(Database,.DBinfo)'=1
	{
		write "FATAL - can't find FromDB """_Database_"""",!
		quit 0
	}
	set Directory = DBinfo("Directory")
 	// we have the basic info we need to test
 	set jobcnt = 1	// starting value
 	set runsfail = 0	// how many runs have failed TargetResponse
 	// clear the decks
 	kill ^%ZPERFTOOLS
 	 	
 	// launch
 	while jobcnt<=MaxJobs
 	{
 		do ..RANREADLaunch(Directory,jobcnt,SpinUpTime,TestTime)
 		set run = ^%ZPERFTOOLS("RANREAD","BATCH")
 		// analyse results TODO
 		if ^%ZPERFTOOLS("RANREAD","BATCH",run,"AvgResponse")>TargetResponse
 		{
	 		set runsfail=runsfail+1
	 		if runsfail>=3	// how far to go beyond the limit to know this is not a spurious failure
	 		{
		 		write "Finishing due to "_runsfail_" consecutive runs above TargetResponse",!
		 		quit
	 		}
 		}
		else
 		{
 			set runsfail=0
		}
		set jobcnt = jobcnt * 2
	}
]]></Implementation>
</Method>

<Method name="RANREADResults2CSV">
<Description>
retrieve the results</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>File:%String</FormalSpec>
<Implementation><![CDATA[
	set out = ##class(%File).%New(File)
	do out.Open("WN")
	do out.WriteLine("Test Start,Test End,Database,SpinUpTime,TestTime,Processes,MinIOPS,AvgIOPS,MaxIOPS,TotalIOPS,MinResponse,AvgResponse,MaxResponse")
	set jobcnt=1
	while $DATA(^%ZPERFTOOLS("RANREAD","BATCH",jobcnt))
	{
		do out.Write(""""_$ZDATETIME(^%ZPERFTOOLS("RANREAD","BATCH",jobcnt,"Start"))_""",")
		do out.Write(""""_$ZDATETIME(^%ZPERFTOOLS("RANREAD","BATCH",jobcnt,"End"))_""",")
		do out.Write(""""_^%ZPERFTOOLS("RANREAD","BATCH",jobcnt,"Database")_""",")
		do out.Write(^%ZPERFTOOLS("RANREAD","BATCH",jobcnt,"SpinUpTime")_",")
		do out.Write(^%ZPERFTOOLS("RANREAD","BATCH",jobcnt,"TestTime")_",")
		do out.Write(^%ZPERFTOOLS("RANREAD","BATCH",jobcnt,"Processes")_",")
		do out.Write(^%ZPERFTOOLS("RANREAD","BATCH",jobcnt,"MinIOPS")_",")
		do out.Write(^%ZPERFTOOLS("RANREAD","BATCH",jobcnt,"AvgIOPS")_",")
		do out.Write(^%ZPERFTOOLS("RANREAD","BATCH",jobcnt,"MaxIOPS")_",")
		do out.Write(^%ZPERFTOOLS("RANREAD","BATCH",jobcnt,"TotalIOPS")_",")
		do out.Write(^%ZPERFTOOLS("RANREAD","BATCH",jobcnt,"MinResponse")_",")
		do out.Write(^%ZPERFTOOLS("RANREAD","BATCH",jobcnt,"AvgResponse")_",")
		do out.Write(^%ZPERFTOOLS("RANREAD","BATCH",jobcnt,"MaxResponse"))
		do out.WriteLine()
		set jobcnt = jobcnt+1
	}
	do out.Close()
]]></Implementation>
</Method>

<Method name="AutoWriteBenchmark">
<Description>
/////////////////////////////////////////////////////////////////////////
Main automated GMASH Benchmarking
/////////////////////////////////////////////////////////////////////////</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>File:%String,NameSpace:%String="ZWRITETEST",TestTime:%Integer=900,Processes:%Integer=10,Limit:%Integer=1000</FormalSpec>
<Implementation><![CDATA[
	// sanity check
	if (NameSpace="%SYS")||(NameSpace="USER")||(NameSpace="SAMPLES")||(NameSpace="HSLIB")||(NameSpace="ENSEMBLE")||(NameSpace="ENSDEMO")||(NameSpace="DOCBOOK")
	{
		write "FATAL - Rejecting NameSpace """_NameSpace_""". Only run this in a purpose created NameSpace & Database.",!
		quit
	}
	if ' ##class(%SYS.Namespace).Exists(NameSpace)
	{
		write "FATAL - Namespace specified """_NameSpace_""" doesn't exist"
		quit 0
	}
	// prep the NameSpace
	new $NAMESPACE
	set $NAMESPACE=NameSpace
	set suitesFileName="suites.rsa"
	set paths=$LISTBUILD("./","/tmp/","~/","/trak/")
	for i=1:1:$LISTLENGTH(paths) quit:##class(%File).Exists($LIST(paths,i)_suitesFileName)
	if ##class(%File).Exists($LIST(paths,i)_suitesFileName)
	{
		set suitesFileName = $LIST(paths,i)_suitesFileName
		write "Note - importing """_suitesFileName_"""",!
		do $system.OBJ.Load(suitesFileName,"ck")
	}
	if '##class(%Routine).Exists("GMash.OBJ")	// 2010 fails unless .OBJ appended
	{
		write "FATAL - ""^GMash"" doesn't exist in NameSpace """_NameSpace_"""",!
		quit 0
	}
	// We are ready to go with this namespace TODO
	set $NAMESPACE="%SYS"
	job ^mgstat(1,10+TestTime+10,File)
	set $NAMESPACE=NameSpace
	write "* Starting spin-up with ^mgstat (10 seconds)",!
	hang 10
	write "* Starting ^GMash for "_TestTime_" seconds",!
	do Start^GMash(Processes,Limit)
	hang TestTime
	do Stop^GMash
	write "* Starting spin-down with ^mgstat (10 seconds)",!
	hang 10
	write "* Done",!
]]></Implementation>
</Method>

<Method name="Menu">
<Description>
/////////////////////////////////////////////////////////////////////////
Menu Driven
/////////////////////////////////////////////////////////////////////////</Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	set option="start"
	while option'=""
	{
		write !
		write "TrakCare Automated Benchmarking",!
		write "===============================",!
		write "r) Read Test (RANREAD equivalent)",!
		write "w) Write Test (GMash)",!
		write !
		write "Choose: "
		read option
		if option="r" do ..MenuRead()
		if option="w" do ..MenuWrite()
	}
]]></Implementation>
</Method>

<Method name="MenuRead">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	write !,"What is the Target Response time (in seconds)? [default 0.01]",!
	write "* "
	read TargetResponse
	if +TargetResponse=0 set TargetResponse=0.01 write TargetResponse
	write !,"What Database do you want to use? [default ZREADTEST]",!
	write "* "
	read Database
	if Database="" set Database = "ZREADTEST" write Database
	write !,"What SpinUp Time do you want to use (in seconds)? [default 60]",!
	write "* "
	read SpinUpTime
	if +SpinUpTime=0 set SpinUpTime=60 write SpinUpTime
	write !,"What Test Time do you want to use (in seconds)? [default 900]",!
	write "* "
	read TestTime
	if +TestTime=0 set TestTime=900 write TestTime
	write !,"What Maxium Processes do you want to allow? [default 64]",!
	write "* "
	read MaxJobs
	if +MaxJobs=0 set MaxJobs=64 write MaxJobs
	set File=""
	while File=""
	{
		write !,"What Output CSV File do you want to write the results to?",!
		write "* "
		read File
		write !
	}
	write !,"Confirm ""y"" to start",!
	write "* "
	read confirm
	write !
	if confirm'="y" quit
	do ..AutoReadBenchmark(TargetResponse,Database,SpinUpTime,TestTime,MaxJobs)
	do ..RANREADResults2CSV(File)
]]></Implementation>
</Method>

<Method name="MenuWrite">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	write !,"What NameSpace do you want to use? [default ZWRITETEST]",!
	write "* "
	read NameSpace
	if NameSpace="" set NameSpace = "ZWRITETEST" write NameSpace
	write !,"What Test Time do you want to use (in seconds)? [default 900]",!
	write "* "
	read TestTime
	if +TestTime=0 set TestTime=900 write TestTime
	write !,"How many processes do you want to use? [default 10]",!
	write "* "
	read Processes
	if +Processes=0 set Processes=10 write Processes
	write !,"What Limit (in MB) do you want to put on ^GMash? [default 1000]",!
	write "* "
	read Limit
	if +Limit=0 set Limit=1000 write Limit
	set File=""
	while File=""
	{
		write !,"What Output CSV File do you want to write the results to?",!
		write "* "
		read File
		write !
	}
	write !,"Confirm ""y"" to start",!
	write "* "
	read confirm
	write !
	if confirm'="y" quit
	do ..AutoWriteBenchmark(File,NameSpace,TestTime,Processes,Limit)
]]></Implementation>
</Method>
</Class>
</Export>
